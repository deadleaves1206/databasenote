----------------------------文件内容主要为SELECT语句及相关操作---------------
-----------SELECT语句的一般形式
SELECT [ALL | DISTINCT] <选择序列>
	FROM <表引用>, ... , <表引用>
	[WHERE <查询条件>]
	[GROUP BY <分组列>, ... , <分组列> [HAVING <分组选择条件>]]
	[ORDER BY <排序列> [ASC | DESC], ... , <排序列> [ASC | DESC]]
/*
	可以将SELECT分为5个子句
	SELECT 子句
	FROM 子句
	WHERE 子句
	GROUP BY 子句
	ORDER BY 子句
*/
	----SELECT 子句：
	/*
		集合量词：ALL | DISTINCT（可省略，缺省为ALL）
		ALL：不删除结果的重复行
		DISTINCT：删除结果中的重复行
	*/
	<选择序列> ::= 	{<值表达式> [[AS] <列名>]
					| <列名> = <值表达式>} [, ... ,n] --[, ... ,n]表示可以有n个语句，每个语句之间用','分隔
	/*
		选择序列可以是'*'，表示查询结果包含FROM子句指定的表或关系的所有属性。
		通常，<选择序列>列举查询结果的每个列；次序任意，结果列之间用逗号隔开。
	*/
	/*
		显示前几行数据的TOP关键字：
		SELECT TOP 3 * FROM jobs
		SELECT TOP 50 PERCENT * FROM jobs
	*/
		<值表达式> ::= 	[<表名>.]<列名> --如果列名不会引起混淆（只出现在一个表中），可以省略表名
						| 其他任意求值表达式 --例如：st_name + '是个好学生'

	----FROM 子句
	<表引用> ::= <表名>[[AS] <表别名>]

	----WHERE 子句
	/*
		WHERE子句相当于关系代数中的选择运算，<查询条件> 是作用于FROM子句表和视图的选择谓词
		可缺省，缺省时相当于 WHERE TRUE（恒真）
		SELECT执行相当于：	先求FROM子句指定的基本表或导出表的笛卡尔积
							然后根据WHERE子句选择满足查询条件的元祖
							最后投影到SELECT子句的结果列上
	*/

	--不带WHERE子句的简单查询
	SELECT * --'*'表示所有的属性列
	FROM Courses;

	SELECT DISTINCT Cno AS 课程号, Cname AS 课程名
	FROM Courses;

	--带WHERE子句的查询
	--1、比较表达式
		<值表达式1> θ <值表达式2>
		/*
			θ 是比较运算符（< | <= | > | >= | = | <> | !=）
		*/
		SELECT DISTINCT Sno
		FROM SC
		WHERE Grade < 60;
	--2、BETWEEN表达式
		<值表达式> [NOT] BETWEEN <下界> AND <上界>
		SELECT * 
		FROM Students
		WHERE Birthday BETWEEN 1987 AND 1990;
	--3、IN表达式
		<值表达式> [NOT] IN (<值表达式列表>)
		SELECT *
		FROM Students
		WHERE Speciality IN ('计算机科学与技术', '软件工程')
	--4、LIKE表达式
		/*
			用于模糊匹配字符串
		*/
		<匹配值> [NOT] LIKE <模式> [ESCAPE '<换码字符>']
		/*
			其中，<匹配值> <模式> 都是字符串。
			通常，<匹配值>为属性，<模式>为字符串常量，且<模式>中可以出现通配符。
			常用通配符：'_', '%', '[]', '[^]'
			'_'匹配任意单个字符
			'%'匹配任意长度字符串
			'[]'匹配一个在区间内的字符，例：[0-9]，表示从0到9的任一字符
			'[^]'与'[]'相反，匹配任意不在该区间的一个字符，例：[^0-9]，表示不是0到9的任一字符
		*/
		/*
			[ESCAPE '<转码字符>']
			例：ESCAPE '\'，表示'\'为转义字符，
			则出现在'\'后的通配符，不再具有通配符的作用，只取其字面意义
		*/
		--5、NULL表达式
		/*
			SQL允许元组在某些属性上取空值（NULL）。空值代表未知（不确定），不能与其他值进行比较
		*/
		<值表达式> | <子查询> IS [NOT] NULL

	----ORDER BY 子句：排序
	ORDER BY {<排序列> [ASC | DESC] [, ... , N]}
	/*
		<排序列> 为属性名或属性的别名
		ASC：升序			DESC：降序		可缺省，缺省为ASC
		如果有多个排序列，则按照从左到右的顺序，首先按照第一个<排序列>的值排序
		第一个<排序列>的值相同的元组再按照第二个<排序列>的值排序，……
	*/

	----GROUP BY 子句：分组
	GROUP BY {<分组列> [, ... , N]} [HAVING <分组选择条件>]
		<分组列> ::= [<表名>.] <列名> --列要出现在FROM子句所包含的表中
	/*
		对于带GROUP BY子句的SELECT语句，SELECT子句中的结果列必须是GROUP BY子句中的<分组列>或者是聚合函数
		HAVING 缺省时，相当于HAVING TRUE（恒真）
	*/
	/*
		注：WHERE和HAVING作用相似，均是用于选择
		然而HAVING子句中可以出现聚合函数，而WHERE中则不许出现聚合函数
	*/

	----聚合函数
	/*
		聚合函数，是一些常用的统计量函数，常用的有：sum、count:计数、avg、max、min
		聚合函数只能产生一个值
	*/
	COUNT (*)	或：	<聚合函数>([ALL | DISTINCT] <值表达式>)
	/*
		第一种值表达式为'*'的形式，只有COUNT函数可以使用
		第二种所有聚合函数均可使用
	*/
	/*
		<值表达式> 可以是属性，也可以是任意的可求值表达式
	*/

-----------使用SELECT语句复制一张新表
	SELECT <列名>[, ... , N] | * 
		INTO <新表名>
		FROM <旧表名>
	--只能复制数据和标识列，不能复制约束


-----------多表查询
---------多表查询需要先将多个表连接成一个虚拟的表
/*连接分为两种，一种是内连接，一种是外连接*/

-----内连接
/*内连接也叫连接，是最早的一种连接，最早被称为普通连接或自然连接。
内连接是从结果中删除其他被连接表中没有匹配行的所有行，所以内连接可能会丢失信息。*/
--内连接的语法：
SELECT [ALL | DISTINCT] <选择序列>
FROM table1 [INNER] JOIN table2
ON table1.column=table2.column


-----外连接
/*外连接则扩充了内连接的功能，会把内连接中删除表源中的一些保留下来。
由于保留下来的行不同，把外连接分为左外连接、右外连接和全外连接这3种连接。*/
-----1、左外连接
/*左外连接保留了第一个表的所有行，但只包含第二个表与第一表匹配的行。
第二个表相应的空行被放入NULL值。*/
--左外连接的语法：
SELECT [ALL | DISTINCT] <选择序列>
FROM table1 LEFT JOIN table2
ON table1.column=table2.column
-----2．右外连接
/*右外连接保留了第二个表的所有行，但只包含第一个表与第二个表匹配的行。
第一个表相应空行被入NULL值。*/
--右外连接的语法：
SELECT [ALL | DISTINCT] <选择序列>
FROM table1 RIGHT JOIN table2
ON table1.column=table2.column
-----3．全外连接
/*全外连接会把两个表所有的行都显示在结果表中。*/
--全外连接的语法：
SELECT [ALL | DISTINCT] <选择序列>
FROM table1 FULL JOIN table2
ON table1.column=table2.column

-----自连接
/*
自联接:自己和自己联接

要将表重命名
*/


-----------子查询
/*
子查询 :

可以放在select ,update ,delete语句当中.

二个表以上使用子查询的规则:
1:确定父查询(一般是显示的结果)
2:条件是做为子查询
3:找出二个表或多个表的公共字段
*/
-------1）IN引出的子查询
<元组> [NOT] IN <子查询>
/*
其中，<元组>形如(<值表达式>, ... , <值表达式>)，
并且当元组只有一个分量时，可以省略圆括号。
当且仅当<元组>出现在<子查询>的结果中，<元组> IN <子查询>为真，
而<元组> NOT IN <子查询> 为假。
*/
--例子：查询和王丽丽在同一个专业学习的女同学的学号和姓名
SELECT Sno, Sname
FROM Students
WHERE Sex='女' AND Speciality IN
	(
	SELECT Speciality
	FROM Students
	WHERE Sname = '王丽丽'
	);
/*当子查询结果只有一行时，可以使用 = 代替 IN。*/

-------2）集合的比较引出的子查询
<值表达式> θ ALL | SOME | ANY <子查询>
/*
其中，<值表达式>通常是属性（也可以是变量）；
θ是比较运算符(=、<>、<、>、<=、>=)；
SOME 和 ANY 的含义相同（一般用SOME，因为ANY容易和英语单词any的意思混淆），
当<子查询>的结果为单个值时，ALL、SOME和ANY可以省略。
ALL：表示与<子查询>的所有结果相比较均满足θ。
SOME：表示与<子查询>中某一个值满足比较结果θ
需注意：= SOME 相当于 IN，但是 <> SOME 不等价于 NOT IN。
*/

-------3）存在量子引出的子查询
EXISTS <子查询>
/*
其中，<子查询>的SELECT子句的形式为：SELECT *。EXISTS <子查询>为真，
当且仅当<子查询>的结果非空（至少包含一个元组）。
*/

-------4）子查询导出表
<子查询> AS <表名> (<列名>[, ... , N])
/*
其中，<表名>是结果表的名称，<列名>是结果表中每一列的名称。
*/
--例如：
SELECT Cno, Avg_grad
	FROM (SELECT Cno, AVG(Grade)
			FROM SC
			GROUP BY Cno) AS Course_avg_grade(Cno, Avg_grad)
	WHERE Avg_grad > 85;