----------------------------文件内容主要为SELECT语句及相关操作---------------
-----------SELECT语句的一般形式
SELECT [ALL | DISTINCT] <选择序列>
	FROM <表引用>, ... , <表引用>
	[WHERE <查询条件>]
	[GROUP BY <分组列>, ... , <分组列> [HAVING <分组选择条件>]]
	[ORDER BY <排序列> [ASC | DESC], ... , <排序列> [ASC | DESC]]
/*
	可以将SELECT分为5个子句
	SELECT 子句
	FROM 子句
	WHERE 子句
	GROUP BY 子句
	ORDER BY 子句
*/
	----SELECT 子句：
	/*
		集合量词：ALL | DISTINCT（可省略，缺省为ALL）
		ALL：不删除结果的重复行
		DISTINCT：删除结果中的重复行
	*/
	<选择序列> ::= 	{<值表达式> [[AS] <列名>]
					| <列名> = <值表达式>} [, ... ,n] --[, ... ,n]表示可以有n个语句，每个语句之间用','分隔
	/*
		选择序列可以是'*'，表示查询结果包含FROM子句指定的表或关系的所有属性。
		通常，<选择序列>列举查询结果的每个列；次序任意，结果列之间用逗号隔开。
	*/
	/*
		显示前几行数据的TOP关键字：
		SELECT TOP 3 * FROM jobs
		SELECT TOP 50 PERCENT * FROM jobs
	*/
		<值表达式> ::= 	[<表名>.]<列名> --如果列名不会引起混淆（只出现在一个表中），可以省略表名
						| 其他任意求值表达式 --例如：st_name + '是个好学生'

	----FROM 子句
	<表引用> ::= <表名>[[AS] <表别名>]

	----WHERE 子句
	/*
		WHERE子句相当于关系代数中的选择运算，<查询条件> 是作用于FROM子句表和视图的选择谓词
		可缺省，缺省时相当于 WHERE TRUE（恒真）
		SELECT执行相当于：	先求FROM子句指定的基本表或导出表的笛卡尔积
							然后根据WHERE子句选择满足查询条件的元祖
							最后投影到SELECT子句的结果列上
	*/

	--不带WHERE子句的简单查询
	SELECT * --'*'表示所有的属性列
	FROM Courses;

	SELECT DISTINCT Cno AS 课程号, Cname AS 课程名
	FROM Courses;

	--带WHERE子句的查询
	--1、比较表达式
		<值表达式1> θ <值表达式2>
		/*
			θ 是比较运算符（< | <= | > | >= | = | <> | !=）
		*/
		SELECT DISTINCT Sno
		FROM SC
		WHERE Grade < 60;
	--2、BETWEEN表达式
		<值表达式> [NOT] BETWEEN <下界> AND <上界>
		SELECT * 
		FROM Students
		WHERE Birthday BETWEEN 1987 AND 1990;
	--3、IN表达式
		<值表达式> [NOT] IN (<值表达式列表>)
		SELECT *
		FROM Students
		WHERE Speciality IN ('计算机科学与技术', '软件工程')
	--4、LIKE表达式
		/*
			用于模糊匹配字符串
		*/
		<匹配值> [NOT] LIKE <模式> [ESCAPE '<换码字符>']
		/*
			其中，<匹配值> <模式> 都是字符串。
			通常，<匹配值>为属性，<模式>为字符串常量，且<模式>中可以出现通配符。
			常用通配符：'_', '%', '[]', '[^]'
			'_'匹配任意单个字符
			'%'匹配任意长度字符串
			'[]'匹配一个在区间内的字符，例：[0-9]，表示从0到9的任一字符
			'[^]'与'[]'相反，匹配任意不在该区间的一个字符，例：[^0-9]，表示不是0到9的任一字符
		*/
		/*
			[ESCAPE '<转码字符>']
			例：ESCAPE '\'，表示'\'为转义字符，
			则出现在'\'后的通配符，不再具有通配符的作用，只取其字面意义
		*/
		--5、NULL表达式
		/*
			SQL允许元组在某些属性上取空值（NULL）。空值代表未知（不确定），不能与其他值进行比较
		*/
		<值表达式> | <子查询> IS [NOT] NULL

	----ORDER BY 子句：排序
	ORDER BY {<排序列> [ASC | DESC] [, ... , N]}
	/*
		<排序列> 为属性名或属性的别名
		ASC：升序			DESC：降序		可缺省，缺省为ASC
		如果有多个排序列，则按照从左到右的顺序，首先按照第一个<排序列>的值排序
		第一个<排序列>的值相同的元组再按照第二个<排序列>的值排序，……
	*/

	----GROUP BY 子句：分组
	GROUP BY {<分组列> [, ... , N]} [HAVING <分组选择条件>]
		<分组列> ::= [<表名>.] <列名> --列要出现在FROM子句所包含的表中
	/*
		对于带GROUP BY子句的SELECT语句，SELECT子句中的结果列必须是GROUP BY子句中的<分组列>或者是聚合函数
		HAVING 缺省时，相当于HAVING TRUE（恒真）
	*/
	/*
		注：WHERE和HAVING作用相似，均是用于选择
		然而HAVING子句中可以出现聚合函数，而WHERE中则不许出现聚合函数
	*/

	----聚合函数
	/*
		聚合函数，是一些常用的统计量函数，常用的有：sum、count:计数、avg、max、min
		聚合函数只能产生一个值
	*/
	COUNT (*)	或：	<聚合函数>([ALL | DISTINCT] <值表达式>)
	/*
		第一种值表达式为'*'的形式，只有COUNT函数可以使用
		第二种所有聚合函数均可使用
	*/
	/*
		<值表达式> 可以是属性，也可以是任意的可求值表达式
	*/