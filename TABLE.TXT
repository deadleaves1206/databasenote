----------------------------------文件内容为基本表相关操作-------------------------------

/*
	注：
	1、为简洁，依照惯例，使用以下符号（均为SQL解释语言）及类T-SQL伪代码、T-SQL代码；
	2、为醒目，依照惯例，保留字（关键字）均使用大写（SQL保留字大小写不敏感）。
*/

/*
	<x>		表示X是需要进一步定义或说明的语言成分
	[X]		表示X是可以缺省或出现一次的语言成分
	{X}		表示X是可以出现一次的语言成分
	X | Y	表示X出现，或者Y出现，但二者不可同时出现
	<X> ::=	Y 表示Y为X的进一步定义或说明，语句块Y常被复用
*/


---------------------------------------创建基本表
CREATE TABLE <表名>
(
	<列定义>, ... , <列定义>
	[, <表约束定义>, ... , <表约束定义>]
);
	/*
		注：1、一个SQL语句可以写在一行或多行中，其结尾用';'（';'可省略）
			2、对于一个语句块中多个子语句，用','进行分隔
			3、表名（列名）中出现空格，或者表名（列名）为关键字，可用[表名]的方式命名
				例如：[books user] 或者 [password]
	*/


<列定义> ::=
	<列名><类型>[DEFAULT<缺省值>][<列约束定义>, ... , <列约束定义>]

<列约束定义> ::=
	[CONSTRAINT <约束名>] <列约束>
	/*
		常用的列约束包括：
			NOT NULL：非空约束（不加 NOT NULL 时，默认为 NULL）；
			PRIMARY KEY：主键约束（指明该列为主码（主键），其值非空，唯一）；
				注：列约束中定义的主键约束，只能是单一主键约束（只能指定某一列为主键）
			UNIQUE：唯一约束，该列上的值必须唯一，但可以为空（相当于说明该列为候选码）；
			CHECK(<条件>)：指明该列的值必须满足的条件，其中 '<条件>' 是一个涉及该列的布尔表达式；
	*/

<表约束定义> ::=
	[CONSTRAINT <约束名>] <表约束>
	/*
		常用的表约束包括：
			PRIMARY KEY(A1, ... , AN)：说明由列 A1, ... , AN 共同构成联合主键
				联合主键：A1, ... , AN 中只要有一列的属性不同，即为不同主码
			UNIQUE(A1, ... , AN)：说明 A1, ... , AN 多列组合（非主键）唯一
				类似联合主键，只需要其中一列不同，即可符合约束
			CHECK (<条件>)：说明该表上的一个完整性约束。
				通常，<条件>是一个涉及该表一个或多个列的布尔表达式。
			FOREIGN KEY：形式如下
				FOREIGN KEY (A1, ... , AN) REFERENCES <外表名> (<外表主码>)
				[<参照触发动作>]
					<参照触发动作> ::=
						[ON DELETE <参照动作>]
						[ON UPDATE <参照动作>]
						指出修改和删除违反参照完整性约束时触发的动作；
						缺省时，违反参照完整性约束的修改和删除将被拒绝.
						<参照动作> ::=
							CASCADE			--级联
							SET NULL： 		--置空值
							SET DEFAULT		--置缺省值
							NO ACCTION		--拒绝
	*/
---------------------------------------修改基本表
/*
	ALTER TABLE
*/
-----------（1）向基本表添加新的列
ALTER TABLE <表名> ADD [COLUMN] <列定义>;

	<列定义> ::=
		<列名><类型>[DEFAULT<缺省值>][<列约束定义>, ... , <列约束定义>]

-----------（2）对于已经存在的列，SQL-92只允许修改或删除列的缺省值
ALTER TABLE <表名>
	ALTER [COLUMN] <列名> {SET DEFAULT <缺省值> | DROP DEFAULT}

-----------（3）删除已存在的列
ALTER TABLE <表名> DROP [COLUMN] <列名> {CASCADE | RESTRICT}
	/*
		CASCADE：级联，删除将成功，且依赖于该列的数据库对象（如涉及该列的视图）也一并删除
		RESTRICT：受限，仅当没有依赖于该列的数据库对象时删除才能成功
	*/

-----------（4）添加表约束
ALTER TABLE <表名> ADD <表约束定义>
	/*
		另一种添加缺省值约束的方法：
		ALTER TABLE stuinfo ADD
		CONSTRAINT DF_ADDRESS
		DEFAULT '上海' FOR stuaddress
	*/

-----------（5）删除表约束
ALTER TABLE <表名> DROP CONSTRAINT <约束名>
	{CASCADE | RESTRICT}
		/*
			CASCADE：级联，删除的同时删除依赖于该约束的数据库对象
			RESTRICT：仅当不存在依赖于该约束的数据库对象时才删除该约束
		*/

---------------------------------------删除基本表
/*
	DROP TABLE
*/
DROP TABLE <表名> {CASCADE | RESTRICT}

---------------------------------------索引
/*
一个表最好有一个主键，只要在表中建一个主键，就为此表建了一个主键索引.
1:主键索引
2:唯一索引
3:二大类(聚集索引和非聚集索引)
一个表只能有一个聚集索引。
复合主键不能使用聚集索引。
*/
--语法：
CREATE [UNIQUE] [CLUSTERED|NONCLUSTERED]  
    INDEX   index_name
     ON table_name (column_name…)
      [WITH FILLFACTOR=x]		--FILLFACTOR是填充因子

--指定按照某一索引查询（一般不需要指定）
SELECT * FROM jobs (INDEX=non_jobs_minlvl) 

---------------------------------------视图
/*
 视图是一种命名的导出表，是从一个或多个基本表（或视图）到处的表。
 但与基本表不同，视图的数据并不物理地存储在数据库中（物化视图）除外。
 查询时，凡是能够出现基本表的地方，都允许出现视图。但是，只有可更新的视图
 才允许更新。
*/
--创建视图
CREATE VIEW <视图名> [(<列名>[, ... , N])]
AS <查询表达式>
[WITH CHECK OPTION]
/*
 其中<视图名>是标示符
 <列名>可以省略，如果省略，则视图中每一列的名字和<查询表达式>中的列名相同。
 WITH CHECK OPTION 表示可更新视图，在更新时同步更新基本表。如果通过该视图
 修改数据，则必须符合<查询表达式>中设置的条件。而修改后的数据，一定符合<查询表达式>
 中设置的条件。
*/

--删除视图
DROP VIEW <视图名> [CASCADE | RESTRICT]
/*
 默认为RESTRICT。
 CASCADE：级联删除
 RESTRICT：限制删除
*/

/*
 视图的作用：
 1、可以使一些查询表达更加简洁
 2、视图提供了一定程度的逻辑独立性
 3、视图可以在一定程度上保护数据
 4、视图可以使用户能够以不同角度看待相同的数据
*/